#carousel-container.row.fight-navbar-margin
  .col-md-12
    #listing-slideshow.carousel.slide{"data-ride" => "carousel"}
      / Indicators
      %ol.carousel-indicators
        - @listing.pictures.each_with_index do |pic, index|
          - if index == 0
            %li.active{"data-slide-to" => "#{index}", "data-target" => "#listing-slideshow"}
          - else
            %li{"data-slide-to" => "#{index}", "data-target" => "#listing-slideshow"}
      / Wrapper for slides
      .carousel-inner{:role => "listbox"}
        - @listing.pictures.each_with_index do |pic, index|
          - if index == 0
            .item.active
              = image_tag pic.image.url(:original), :class => "img-responsive"
          - else
            .item
              = image_tag pic.image.url(:original), :class => "img-responsive"
      / Controls
      %a.left.carousel-control{"data-slide" => "prev", :href => "#listing-slideshow", :role => "button"}
        %span.glyphicon.glyphicon-chevron-left{"aria-hidden" => "true"}
        %span.sr-only Previous
      %a.right.carousel-control{"data-slide" => "next", :href => "#listing-slideshow", :role => "button"}
        %span.glyphicon.glyphicon-chevron-right{"aria-hidden" => "true"}
        %span.sr-only Next
    .col-md-4.listing-name-display
      .col-md-12
        .panel.panel-default
          .panel-body
            %h5
              = @listing.name
              %br
              %br
            .row
              .col-md-6
                %small
                  = "#{@listing.location.city}, #{@listing.location.state}"
              .col-md-6.text-right
                = button_tag "Book it!", :class => "btn btn-primary", "data-toggle" => "modal", "data-target" => "#reservation-modal"
    .col-md-8.rate-display
      .col-md-3.col-md-offset-9
        .panel
          .panel-body
            %ul.list-unstyled.rates-list
              - @listing.rates.each do |rate|
                %li
                  %span.rate-amount
                    = number_to_currency(rate.amount).gsub(/\.00$/, "")
                  %span.rate-date-range
                    = rate.date_range


#listing-details.col-md-12
  .col-md-4.user-display
    .panel.panel-default
      .panel-body
        %h6.text-center
          = @listing.user.first_name
  .col-md-8
    .panel.panel-default
      .panel-body
        - if @listing.periods.first
          %p
            %strong
              Last day available:
              = @listing.periods.first.end

        = raw(@listing.description)
    
.row
  #google-map
    .col-md-12
      #map
= render 'layouts/footer'



#reservation-modal.modal.fade
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
          %span{"aria-hidden" => "true"} &times;
        / The modal title will change dynamically, so we can statically set the first tab's title for initial page load
        %h4.modal-title.reservation-modal-title Select Rate
      .modal-body
        = form_for @reservation do |f|
          #reservation-step-1.reservation-inner-tab.active.row{ "data-modal-title" => "Select Rate"}
            .col-md-12
              - if @listing.rates
                - @listing.rates.each do |rate|
                  = f.radio_button :rate, "#{number_to_currency(rate.amount)} #{rate.date_range}", :class => "rate-radio-btn", "data-time-range" => "#{base_time(rate.date_range)}",:checked => true
                  = f.label :rate, "#{number_to_currency(rate.amount)} #{rate.date_range}", :value => "#{number_to_currency(rate.amount)} #{rate.date_range}"
                  %br
          #reservation-step-2.reservation-inner-tab.row{ "data-modal-title" => "Select Date"}
            .col-md-12
              #hour.time-range-section
                #hour-times.row
                  .col-md-3
                    = f.label :start_date
                    %br
                    = f.text_field :from_date, :id => "start-date", :class => "form-control date start"
                  .col-md-3
                    = f.label :start_time
                    %br
                    = f.text_field :start_time, :id => "start-time", :class => "form-control time start"
                  .col-md-3
                    = f.label :end_time
                    %br
                    = f.text_field :end_time, :id => "end-time", :class => "form-control time end"
                  .col-md-3
                    = f.label :end_date
                    %br
                    = f.text_field :to_date, :id => "end-date", :class => "form-control date end"
                .row
                  #hour-times.validation-message.col-md-6
                  #total-time.validation-message.col-md-6.text-right
                    .row
                      .col-md-6
                        %small
                          Total Time:
                      .col-md-6
                        %span.total-time-amount
                          0 hrs
                    .row
                      .col-md-6
                        %small
                          Est. Total*:
                      .col-md-6
                        %span.estimated-total-amount
                          $0.00
                  .row
                    .col-md-12
                      .col-md-6.col-md-offset-6.text-right
                        %small.small-disclaimer
                          * Does not include service fees.
          #reservation-step-3.reservation-inner-tab.row{ "data-modal-title" => "Payment Method"}
            .col-md-12
              Add Payment
          #reservation-step-4.reservation-inner-tab.row{ "data-modal-title" => "Review"}
            .col-md-12
              Review and Book
      .modal-footer
        / Next Button only (First Tab)
        .row.next-btn-only.next-prev-btns.active
          .col-md-12.text-right
            = render 'layouts/next_btn'

        / Both buttons
        .row.both-btns.next-prev-btns
          .col-md-6.text-left
            = render 'layouts/prev_btn'
          .col-md-6.text-right
            = render 'layouts/next_btn'

        / Prev Button only (Last Tab)
        .row.prev-btn-only.next-prev-btns
          .col-md-6.text-left
            = render 'layouts/prev_btn'
          .col-md-6.text-right
            
    


:javascript
  handler = Gmaps.build('Google');
  handler.buildMap({ internal: {id: 'map'}, provider: { scrollwheel: false }}, function(){
    var markers = handler.addMarkers(#{@coordinate});
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    handler.getMap().setZoom(14);
  });

  $(document).ready(function() {

    // Array of tabs for Book It modal
    var formSections = $(".reservation-inner-tab");
    var timeRange = "";

    // Next Button clicked
    $(".next-btn").on("click", function(e) {
      e.preventDefault();

      if ($("#reservation-step-1").hasClass("active")) {
        timeRange = $(".rate-radio-btn:checked").data("time-range");
        
        // Change from "Select Date" to "Select Time" if an hourly time range is selected
        if (timeRange === "hour") {
          $("#reservation-step-2").data("modal-title", "Select Date and Time");
          spanMultipleDays = false;
        } else {
          timeRange = "";
          $("#reservation-step-2").data("modal-title", "Select Date");
        }
      }

      //Remove active class from Next/Prev buttons
      $(".next-prev-btns").removeClass("active");

      // Get current tab so we can remove active class from it after.
      var currentTab = $(".reservation-inner-tab.active");

      // Select new tab
      formSections.filter('.active').next('.reservation-inner-tab').addClass("active");

      // Remove active class from the former tab
      currentTab.removeClass("active");

      // Get the new tab that's active
      var newTab = formSections.filter(".active");

      // Set tab title for the "Book it!" modal
      $(".reservation-modal-title").html(newTab.data("modal-title"));

      // Set the appropriate Prev and Next buttons
      if (newTab.is(":first-child")) {
        $(".next-btn-only").addClass("active");
      } else if (newTab.is(":last-child")) {
        $(".prev-btn-only").addClass("active");
      } else {
        $(".both-btns").addClass("active");
      }

      if ($("#reservation-step-2").hasClass("active")) {
        $(".next-btn").attr("disabled", "disabled");
      }
    });



    // Prev Button clicked
    $(".prev-btn").on("click", function(e) {
      e.preventDefault();

      //Remove active class from Next/Prev buttons
      $(".next-prev-btns").removeClass("active");

      // Get current tab so we can remove active class from it after.
      var currentTab = $(".reservation-inner-tab.active");

      // Select new tab
      formSections.filter('.active').prev('.reservation-inner-tab').addClass("active");

      // Remove active class from the former tab
      currentTab.removeClass("active");

      // Get the new tab that's active
      var newTab = formSections.filter(".active");

      // Set tab title for the "Book it!" modal
      $(".reservation-modal-title").html(newTab.data("modal-title"));

      // Set the appropriate Prev and Next buttons
      if (newTab.is(":first-child")) {
        $(".next-btn-only").addClass("active");
      } else if (newTab.is(":last-child")) {
        $(".prev-btn-only").addClass("active");
      } else {
        $(".both-btns").addClass("active");
      }
    });

    



    // Get today's date in mm/dd/yyyy format
    function getTodayAsMMDDYYYY() {
      var today = new Date();
      var dd = today.getDate();
      var mm = today.getMonth()+1; //January is 0!
      var yyyy = today.getFullYear();

      if(dd<10) {
          dd='0'+dd
      } 

      if(mm<10) {
          mm='0'+mm
      } 

      return today = mm+'/'+dd+'/'+yyyy;
    }

    function makeOpaque() {
      var section = $("#listing_periods_specific_dates").data("section");

      if ($("#listing_periods_specific_dates").is(":checked")) {
        $(section).css("opacity", "1.0");
        $(section + " input").removeAttr("disabled");
      } else {
        $(section).css("opacity", "0.3");
        $(section + " input").attr("disabled", "disabled");
      }
    }


    /* 
     * Credit to: user2586273 from StackOverflow for this bit of code, which is found here:
     * http://stackoverflow.com/questions/11933173/how-to-restrict-the-selectable-date-ranges-in-bootstrap-datepicker
     * Thanks, bro.
     */
    var startDate = new Date('01/01/2012');
    var FromEndDate = new Date();
    var ToEndDate = new Date();

    ToEndDate.setDate(ToEndDate.getDate()+365);

    // $('#stat-date').datepicker({
    //     weekStart: 1,
    //     startDate: getTodayAsMMDDYYYY(),
    //     autoclose: true
    // }).on('changeDate', function(selected){
    //     startDate = new Date(selected.date.valueOf());
    //     startDate.setDate(startDate.getDate(new Date(selected.date./valueOf())));
    //     $('#end-date').datepicker('setStartDate', startDate);

    //     if (timeRange === "hour") {
    //       $("#end-date").datepicker('setEndDate', startDate);
    //       $("#end-date").val($.datepicker.formatDate('mm/dd/yy', startDate));
    //     }
    // });

    $('#nd-date').datepicker({
        weekStart: 1,
        startDate: startDate,
        endDate: ToEndDate,
        autoclose: true
    }).on('changeDate', function(selected){
        FromEndDate = new Date(selected.date.valueOf());
        FromEndDate.setDate(FromEndDate.getDate(new Date(selected.date.valueOf())));
        // $('#start-date').datepicker('setStartDate', FromEndDate);
    });








    
    Date.prototype.addHours = function(h) {
      this.setHours(this.getHours() + h);
      return this;
    }

    // Calculate minimum time
    var coeff = Math.ceil(1000 * 60) * 30;
    var date = new Date();
    var rounded = new Date(Math.round(date.getTime() / coeff) * coeff);
    // Create Datepair object
    var hourTimes = document.getElementById('hour-times');
    var hourTimesDatepair = new Datepair(hourTimes);



    // Initialize "Start Time" picker
    $('#start-time').timepicker({
        minTime: rounded.addHours(0.5),
        'timeFormat': 'g:ia',
        disableTextInput: true
    }).on("selectTime", function() {
        var startTime = $("#start-time").timepicker('getTime');
        console.log(startTime);

        // Initialize "End Time" after a Start Time has been set
        $("#end-time").timepicker({ 
          minTime: rounded.addHours(2),
          'showDuration': true,
          'timeFormat': 'g:ia',
          disableTextInput: true
        });
    });


    // Initialize datepickers
    $('#hour-times .date').datepicker({
        'format': 'mm/dd/yyyy',
        'autoclose': true,
        'startDate': getTodayAsMMDDYYYY()
    }).on("changeDate", function(selected) {
        var selectedDate = new Date(selected.date);
        var incrementedEndDate = selectedDate.setDate(getDate() + 1);
        $('#end-date').datepicker('setStartDate', selected.date);
        $('#end-date').datepicker('setEndDate', incrementedEndDate.);
    });


    // Datepair handlers (date range validation)
    $('#hour-times').on('rangeSelected', function(){
        // Success message
        $('#hour-times.validation-message').html('<span class="success-validation"><i class="fa fa-check-circle fa-lg fa-fw"></i> Valid range selected</span>');

        // Get rates
        var rates = #{@listing.rates.to_json};
        var hourlyRate;

        // Get hourly rate
        for (var i = 0; i < rates.length; i++) {
          if (rates[i].date_range === "per hour") {
            hourlyRate = rates[i].amount;
          }
        }

        // Enable "Next" button when range is valid
        $(".next-btn").removeAttr("disabled");

        var timeDifference = parseRange($("#start-time").val(), $("#end-time").val());

        // Append TOTAL TIME
        if (timeDifference === 1) {
          // Singular of "hours" => "hour"
          $(".total-time-amount").text(timeDifference + " hr");
        } else {
          // Plural of "hours"
          $(".total-time-amount").text(timeDifference + " hrs");
        }

        // Append EST. TOTAL
        $(".estimated-total-amount").text("$" + (hourlyRate * timeDifference) + ".00");


    }).on('rangeIncomplete', function(){
        // Warning message
        $('#hour-times.validation-message').html('<span class="warning-validation"><i class="fa fa-exclamation-circle fa-lg fa-fw"></i> Incomplete range</span>');

        // Disable Next button if range is incomplete
        if ($("#reservation-step-2").hasClass("active")) {
          $(".next-btn").attr("disabled", "disabled");
        }

        clearSubtotals();


    }).on('rangeError', function(){
        // Error message
        $('#hour-times.validation-message').html('<span class="error-validation"><i class="fa fa-exclamation-circle fa-lg fa-fw"></i> Invalid range</span>');

        // Disable Next button if range is invalid
        if ($("#reservation-step-2").hasClass("active")) {
          $(".next-btn").attr("disabled", "disabled");
        }

        clearSubtotals();
    });

    function clearSubtotals() {
      $(".total-time-amount").text("");
      $(".estimated-total-amount").text("");
    }





    function parseRange(startingTime, endingTime) {
      var minutes = parseTime(endingTime) - parseTime(startingTime);
      var hours = minutes / 60;
      return hours;
    }


    function parseTime(time) {
      var timeSplit = time.replace("am", "").replace("pm", "");
      timeSplit = timeSplit.split(":");
      return parseInt(timeSplit[0]) * 60 + parseInt(timeSplit[1]);
    }

  });