= flash[:notice]
#carousel-container.row.fight-navbar-margin
  .col-md-12
    #listing-slideshow.carousel.slide{"data-ride" => "carousel"}
      / Indicators
      %ol.carousel-indicators
        - @listing.pictures.each_with_index do |pic, index|
          - if index == 0
            %li.active{"data-slide-to" => "#{index}", "data-target" => "#listing-slideshow"}
          - else
            %li{"data-slide-to" => "#{index}", "data-target" => "#listing-slideshow"}
      / Wrapper for slides
      .carousel-inner{:role => "listbox"}
        - @listing.pictures.each_with_index do |pic, index|
          - if index == 0
            .item.active
              = image_tag pic.image.url(:original), :class => "img-responsive"
          - else
            .item
              = image_tag pic.image.url(:original), :class => "img-responsive"
      / Controls
      %a.left.carousel-control{"data-slide" => "prev", :href => "#listing-slideshow", :role => "button"}
        %span.glyphicon.glyphicon-chevron-left{"aria-hidden" => "true"}
        %span.sr-only Previous
      %a.right.carousel-control{"data-slide" => "next", :href => "#listing-slideshow", :role => "button"}
        %span.glyphicon.glyphicon-chevron-right{"aria-hidden" => "true"}
        %span.sr-only Next
    .col-md-4.listing-name-display
      .col-md-12
        .panel.panel-default
          .panel-body
            %h5
              = @listing.name
              %br
              %br
            .row
              .col-md-6
                %small
                  = "#{@listing.location.city}, #{@listing.location.state}"
              .col-md-6.text-right
                = button_tag "Book it!", :class => "btn btn-primary", "data-toggle" => "modal", "data-target" => "#reservation-modal"
    .col-md-8.rate-display
      .col-md-3.col-md-offset-9
        .panel
          .panel-body
            %ul.list-unstyled.rates-list
              - @listing.rates.each do |rate|
                %li
                  %span.rate-amount
                    = number_to_currency(rate.amount).gsub(/\.00$/, "")
                  %span.rate-date-range
                    = rate.date_range


#listing-details.col-md-12
  .col-md-4.user-display
    .panel.panel-default
      .panel-body
        %h6.text-center
          = @listing.user.first_name
  .col-md-8
    .panel.panel-default
      .panel-body
        - if @listing.periods.first
          %p
            %strong
              Last day available:
              = @listing.periods.first.end

        = raw(@listing.description)
    
.row
  #google-map
    .col-md-12
      #map
= render 'layouts/footer'



#reservation-modal.modal.fade
  .modal-dialog
    .modal-content
      .modal-header
        %button.close{"aria-label" => "Close", "data-dismiss" => "modal", :type => "button"}
          %span{"aria-hidden" => "true"} &times;
        / The modal title will change dynamically, so we can statically set the first tab's title for initial page load
        %h4.modal-title.reservation-modal-title Select Rate
      .modal-body

        / BOOK IT Form
        = form_for @listing, :url => { :controller => "listings", :action => "reserve"} do |ff|
          = ff.fields_for :reservation do |f|
            #reservation-step-1.reservation-inner-tab.active.row{ "data-modal-title" => "Select Rate"}
              .col-md-12.rate-radio-collection
                = f.fields_for :rate do |r|
                  - if @listing.rates
                    = collection_radio_buttons(:rate, :date_range, @listing.rates, :date_range, :amount_with_date_range) do |rate|
                      .radio
                        = rate.label { rate.radio_button }
                    / - @listing.rates.each do |rate|
                    /   = r.radio_button :rate, "#{number_to_currency(rate.amount)} #{rate.date_range}", :class => "rate-radio-btn", "data-time-range" => "#{rate.date_range}", :value => "#{rate.id}",:checked => true
                    /   = r.label :rate, "#{number_to_currency(rate.amount)} #{rate.date_range}", :value => "#{number_to_currency(rate.amount)} #{rate.date_range}"
                    /   %br
            #reservation-step-2.reservation-inner-tab.row{ "data-modal-title" => "Select Date"}
              .col-md-12
                #hour.time-range-section
                  #hour-times.row
                    = fields_for :period do |p|
                      .col-md-6
                        = p.label :start
                        = p.text_field :start, :id => "start", :class => "form-control"
                      .col-md-6
                        = p.label :end
                        = p.text_field :end, :id => "end", :class => "form-control"
                      .col-md-12
                        .date-range-status
                      %br
                  .row
                    #total-time.validation-message.col-md-6.col-md-offset-6.col-md-pull-6
                      .row
                        .col-md-6
                          %small
                            Total Time:
                        .col-md-6
                          %span.total-time-amount
                            0 hrs
                      .row
                        .col-md-6
                          %small
                            Est. Total*:
                        .col-md-6
                          %span.estimated-total-amount
                            $0.00
                    .row
                      .col-md-12
                        %small.small-disclaimer
                          .col-md-6
                            * Does not include service fees.
            #reservation-step-3.reservation-inner-tab.row{ "data-modal-title" => "Payment Method"}
              .col-md-12
                Payment
            #reservation-step-4.reservation-inner-tab.row{ "data-modal-title" => "Review"}
              .col-md-12
                Review and Book
      .modal-footer
        / Next Button only (First Tab)
        .row.next-btn-only.next-prev-btns.active
          .col-md-12.text-right
            = render 'layouts/next_btn'

        / Both buttons
        .row.both-btns.next-prev-btns
          .col-md-6.text-left
            = render 'layouts/prev_btn'
          .col-md-6.text-right
            = render 'layouts/next_btn'

        / Prev Button only (Last Tab)
        .row.prev-btn-only.next-prev-btns
          .col-md-6.text-left
            = render 'layouts/prev_btn'
          .col-md-6.text-right
            = button_tag "Place Order", :id => "place-order", :class => "btn btn-primary btn-primary-submit form-control"
    


:javascript
  handler = Gmaps.build('Google');
  handler.buildMap({ internal: {id: 'map'}, provider: { scrollwheel: false }}, function(){
    var markers = handler.addMarkers(#{@coordinate});
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    handler.getMap().setZoom(14);
  });



  $(document).ready(function() {

    // Array of tabs for Book It modal
    var formSections = $(".reservation-inner-tab");
    var timeRange = "";

    // Next Button clicked
    $(".next-btn").on("click", function(e) {
      e.preventDefault();

      if ($("#reservation-step-1").hasClass("active")) {
        timeRange = $(".rate-radio-btn:checked").data("time-range");
        
        // Change from "Select Date" to "Select Date & Time" if an hourly time range is selected
        if (timeRange === "hourly") {
          $("#reservation-step-2").data("modal-title", "Select Date and Time");
          spanMultipleDays = false;
        } else {
          timeRange = "";
          $("#reservation-step-2").data("modal-title", "Select Date");
        }
      }

      //Remove active class from Next/Prev buttons
      $(".next-prev-btns").removeClass("active");

      // Get current tab so we can remove active class from it after.
      var currentTab = $(".reservation-inner-tab.active");

      // Select new tab
      formSections.filter('.active').next('.reservation-inner-tab').addClass("active");

      // Remove active class from the former tab
      currentTab.removeClass("active");

      // Get the new tab that's active
      var newTab = formSections.filter(".active");

      // Set tab title for the "Book it!" modal
      $(".reservation-modal-title").html(newTab.data("modal-title"));

      // Set the appropriate Prev and Next buttons
      setAppropriateNextPrevBtns(newTab);
    });



    // Prev Button clicked
    $(".prev-btn").on("click", function(e) {
      e.preventDefault();

      //Remove active class from Next/Prev buttons
      $(".next-prev-btns").removeClass("active");

      // Get current tab so we can remove active class from it after.
      var currentTab = $(".reservation-inner-tab.active");

      // Select new tab
      formSections.filter('.active').prev('.reservation-inner-tab').addClass("active");

      // Remove active class from the former tab
      currentTab.removeClass("active");

      // Get the new tab that's active
      var newTab = formSections.filter(".active");

      // Set tab title for the "Book it!" modal
      $(".reservation-modal-title").html(newTab.data("modal-title"));

      // Set the appropriate Prev and Next buttons
      setAppropriateNextPrevBtns(newTab);
    });

    function setAppropriateNextPrevBtns(newTab) {
      if (newTab.is(":first-child")) {
        $(".next-btn-only").addClass("active");
      } else if (newTab.is(":last-child")) {
        $(".prev-btn-only").addClass("active");
      } else {
        $(".both-btns").addClass("active");
      }

      if ($("#reservation-step-2").hasClass("active")) {
        $(".next-btn").attr("disabled", "disabled");
      }
    }

    
    var totalHours;

    // DateTime pickers for Start and End dates
    $("#start").datetimepicker({
      format: "ddd, MMM D - h:mm A",
      minDate: moment().add('hours', 3),
      sideBySide: true,
      stepping: 15
    }).on("dp.change", function(e) {
      var selectedDate = e.date;
      $("#end").data("DateTimePicker").minDate(selectedDate.add('hours', 1));
      //$("#end").data("DateTimePicker").defaultDate(selectedDate.add('hours', '1'));
      //$("#end").data("DateTimePicker").maxDate(selectedDate.add('days', 1));

      if ($("#end").val() !== "") {
        // Get total hours and estimated total
        totalHours = getTotalHours($("#start").val(), $("#end").val());
        var estimatedTotal = totalHours * #{@listing.rates.hourly.first.amount};

        // Update the estimates review
        updateEstimates(totalHours, estimatedTotal);
        updateDateRangeStatus();
      }
    });

    $("#end").datetimepicker({
      format: "ddd, MMM D - h:mm A",
      sideBySide: true,
      minDate: moment().add('hours', 4),
      stepping: 15
    }).on("dp.change", function(e) {
      var selectedDate = e.date;
      $("#start").data("DateTimePicker").maxDate(selectedDate.subtract('hours', 1));

      // Get total hours and estimated total
      totalHours = getTotalHours($("#start").val(), $("#end").val());
      var estimatedTotal = totalHours * #{@listing.rates.hourly.first.amount};
      
      // Update the estimates review
      updateEstimates(totalHours, estimatedTotal);
      updateDateRangeStatus();
    });

    function updateEstimates(totalHours, estimatedTotal) {
      $(".total-time-amount").html(totalHours + " hrs");
      $(".estimated-total-amount").html("$" + estimatedTotal + ".00");
    }

    function getTotalHours(startTime, endTime) {
      var ms = moment(endTime, "ddd, MMM D - h:mm A").diff(moment(startTime, "ddd, MMM D - h:mm A"));
      var d = moment.duration(ms);
      var s = Math.floor(d.asHours());
      return s;
    }

    function updateDateRangeStatus() {
      if ($("#start").val() !== "" && $("#end").val() !== "" && $("#reservation-step-2").hasClass("active")) {
        $(".next-btn").css("opacity", "1.0");
        $(".next-btn").removeAttr("disabled");
        $(".date-range-status").html("<span class='success-validation'><i class='fa fa-check-circle fa-lg fa-fw'></i> Valid dates selected</span>");
      } else {
        $(".next-btn").css("opacity", "0.3");
        $(".next-btn").attr("disabled", "disabled");
        $(".date-range-status").html("<span class='warning-validation'><i class='fa fa-exclamation-circle fa-lg fa-fw'></i> Incomplete range</span>");
      }
    }



    // Form submission
    $("#place-order").on("click", function() {
      $(".edit_listing").submit();
    });


    
    Date.prototype.addHours = function(h) {
      this.setHours(this.getHours() + h);
      return this;
    }

    // Calculate minimum time
    var coeff = Math.floor(1000 * 60) * 30;
    var date = new Date();
    var rounded = new Date(Math.round(date.getTime() / coeff) * coeff);
    // Create Datepair object
    var hourTimes = document.getElementById('hour-times');
    var hourTimesDatepair = new Datepair(hourTimes);



    // Initialize datepickers
    $('#hour-times .date').datepicker({
        'format': 'mm/dd/yyyy',
        'autoclose': true,
        'startDate': moment('MM/DD/YYYY')
    }).on("changeDate", function(selected) {
        var selectedDate = new Date(selected.date);
        $('#end-date').datepicker('setStartDate', selected.date);
        $('#end-date').datepicker('setEndDate', selected.date);
    });


    function clearSubtotals() {
      $(".total-time-amount").text("");
      $(".estimated-total-amount").text("");
    }





    function parseRange(startingTime, endingTime) {
      var minutes = parseTime(endingTime) - parseTime(startingTime);
      var hours = minutes / 60;
      return hours;
    }


    function parseTime(time) {
      var timeSplit = time.replace("am", "").replace("pm", "");
      timeSplit = timeSplit.split(":");
      return parseInt(timeSplit[0]) * 60 + parseInt(timeSplit[1]);
    }

  });