/========================
/ "List A Space" Form
/========================

#list-a-space.panel.panel-default
  = form_for @listing, :html => {:id => "newlisting_form", :multipart => true, :class => "dropzone clearfix"} do |f|
    .panel-body.tab-display
      .form-container.row
        .col-md-12

          / Tab List
          %ul.list-unstyled.list-inline.col-md-12.text-center
            %li
              = link_to "#name", :class => "inner-tab-link active" do
                Name & Desc.
            %li
              = link_to "#address", :class => "inner-tab-link" do
                Location
            %li
              = link_to "#dates", :class => "inner-tab-link" do
                Dates
            %li
              = link_to "#rates", :class => "inner-tab-link" do
                Rates
            %li
              = link_to "#upload-pictures", :class => "inner-tab-link" do
                Pics



        / Tabs - Each Step is its own tab.
        #steps.col-md-12


          / Step 1: Name and Description
          #name.inner-tab.active.col-md-12
            = f.text_field :name, :class => "form-control", :placeholder => "Name"
            = f.text_field :description, :id => "description", :class => "form-control", :placeholder => "Description", 'data-provider' =>  'summernote'




          / Step 2: List the Address
          #address.inner-tab.col-md-12
            %h4
              Address
            = f.fields_for :location do |l|
              = l.text_field :street_address, :class => "form-control", :placeholder => "Street Address"
              .row
                .col-md-8
                  = l.text_field :city, :class => "form-control", :placeholder => "City"
                .col-md-2
                  = l.select :state, options_for_select(us_states), {:prompt => "State"}, class: "form-control"
                .col-md-2
                  = l.text_field :zip, :class => "form-control", :placeholder => "Zip"
            %br
            %br




          / Step 3: Specify Dates
          #dates.inner-tab.col-md-12




          / Step 4: Add Rates
          #rates.inner-tab.col-md-12
            %h4
              Rates
              %span.add-subtract-rate-forms
                %i#add-rate-form.fa.fa-plus-square-o.fa-lg
                %i#subtract-rate-form.fa.fa-minus-square-o.fa-lg

            / Show at least one "Rates" form
            = render :partial => 'listings/rates_form', :locals => { :f => f }

            / Div to hold additional rates if user clicks on the +/- 
            #additional-rate-forms

            / Adds and Removes extra rate forms 
            :javascript
              $(document).ready(function() {
                $("#add-rate-form").on("click", function(e) {

                  // Prevent the form from being accidentally submitted
                  e.preventDefault();

                  // Append the "rates_form" partial when the #add-rate-form btn (+) is clicked
                  $("#additional-rate-forms").append("#{ escape_javascript( render :partial => 'listings/rates_form', :locals => {:f => f} ) }");

                  // Hide the (+) sign if the number of rates_forms outgrows the number of options (hourly, weekly, etc)
                  if ($("#additional-rate-forms").children().length == parseInt("#{times.count}") - 1) {
                    $("#add-rate-form").hide();
                  } else {
                    $("#add-rate-form").show();
                  }
                });
              });



          / Step 5: Upload Pictures
          #upload-pictures.inner-tab.col-md-12
            %h4
              Upload Pictures
            = f.fields_for :pictures do |p|
              = p.file_field :image, :name => "image[]", :style => "display: none;"
            %br
            %br
            / The Dropzone area
            .dropzone-area.col-md-12
                


    / Next/Prev Buttons
    .panel-footer

      / Next Button only (First Tab)
      .row.next-btn-only.next-prev-btns.active
        .col-md-12.text-right
          = render 'layouts/next_btn'

      / Both buttons
      .row.both-btns.next-prev-btns
        .col-md-6.text-left
          = render 'layouts/prev_btn'
        .col-md-6.text-right
          = render 'layouts/next_btn'

      / Prev Button only (Last Tab)
      .row.prev-btn-only.next-prev-btns
        .col-md-6.text-left
          = render 'layouts/prev_btn'
        .col-md-6.text-right
          = f.submit "Post Listing", :id => "post-listing-btn", :class => "btn btn-primary form-control"




:javascript
  
  var has_images = false;
  
  $(document).ready(function() {
  
    // disable auto discover
    Dropzone.autoDiscover = false;
    
    $(".dropzone-area").click(function(e){
      $(".dropzone").click();
      e.stopPropagation();
    });
   
    // grap our upload form by its id
    $("#newlisting_form").dropzone({
      // restrict image size to a maximum 1MB
      maxFilesize: 1,
      // changed the passed param to one accepted by
      // our rails app
      paramName: "image[]",
      // show remove links on each image upload
      addRemoveLinks: true,
      // The configuration we've talked about above
      autoProcessQueue: false,
      uploadMultiple: true,
      parallelUploads: 100,
      maxFiles: 100,
      previewsContainer: ".dropzone-area",
      clickable: true,
      
       // The setting up of the dropzone
      init: function() {
        var myDropzone = this;

        var dzMessage = $(".dz-default.dz-message").clone();
        $(".dz-default.dz-message").remove();

        $(".dropzone-area").html(dzMessage);
        
        this.on("addedfile", function(file) { 
          has_images = true;
        });
    
        // First change the button to actually tell Dropzone to process the queue.
        this.element.querySelector("input[type=submit]").addEventListener("click", function(e) {
          // Make sure that the form isn't actually being sent.
          e.preventDefault();
          e.stopPropagation();
          myDropzone.processQueue();
        });
    
        // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
        // of the sending event because uploadMultiple is set to true.
        this.on("sendingmultiple", function() {
          // Gets triggered when the form is actually being sent.
          // Hide the success button or the complete form.
        });
        this.on("successmultiple", function(files, response) {
          // Gets triggered when the files have successfully been sent.
          // Redirect user or notify of success.
          window.location.href = "/listings?q=ml"
        });
        this.on("errormultiple", function(files, response) {
          // Gets triggered when there was an error sending the files.
          // Maybe show form again, and notify user of error
        });
      }
    });


    var formSections = $(".inner-tab-link");

    // Submit form when Post Listing button is clicked because HAML was being stupid
    // and throwing an error
    $("#post-listing-btn").on("click", function() {
      if (has_images == false){
        $("#newlisting_form").submit();
      }
    });


    // Enable Summernote
    $('[data-provider="summernote"]').each(function(){
      $(this).summernote({
        height: 300
       });
    });

    // Retrieve value from Summernote text editor on "List A Space" form submission
    $('.inner-tab-link,.next-btn').click(function(){
      $("#description").val($('[data-provider="summernote"]').code());
    });


    // Next and Previous Buttons for "List A Space" form
    $(".next-btn").on("click", function(e) {
      e.preventDefault();
      formSections.filter('.active').parent().next('li').find('a').click();
    });

    $(".prev-btn").on("click", function(e) {
      e.preventDefault();
      formSections.filter('.active').parent().prev('li').find('a').click();
    });


    // Tabs 
    $(".inner-tab-link").on("click", function(e) {
      e.preventDefault();

      var id = $(this).attr("href");

      $(".inner-tab-link").removeClass("active");
      $(this).addClass("active");

      $(".inner-tab").removeClass("active");
      $(id).addClass("active");


      //Remove active class from Next/Prev buttons
      $(".next-prev-btns").removeClass("active");

      // Display Next/Prev buttons according to what tab is selected
      if ($(id).is(":last-child")) {
        $(".prev-btn-only").addClass("active");
      } else if ($(id).is(":first-child")) {
        $(".next-btn-only").addClass("active");
      } else {
        $(".both-btns").addClass("active");
      }
    });

  });